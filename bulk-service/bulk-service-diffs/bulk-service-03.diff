diff --git a/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/job/BulkJobFactory.java b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/job/BulkJobFactory.java
new file mode 100644
index 0000000000..795df6f9a1
--- /dev/null
+++ b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/job/BulkJobFactory.java
@@ -0,0 +1,152 @@
+/*
+COPYRIGHT STATUS:
+Dec 1st 2001, Fermi National Accelerator Laboratory (FNAL) documents and
+software are sponsored by the U.S. Department of Energy under Contract No.
+DE-AC02-76CH03000. Therefore, the U.S. Government retains a  world-wide
+non-exclusive, royalty-free license to publish or reproduce these documents
+and software for U.S. Government purposes.  All documents and software
+available from this server are protected under the U.S. and Foreign
+Copyright Laws, and FNAL reserves all rights.
+
+Distribution of the software available from this server is free of
+charge subject to the user following the terms of the Fermitools
+Software Legal Information.
+
+Redistribution and/or modification of the software shall be accompanied
+by the Fermitools Software Legal Information  (including the copyright
+notice).
+
+The user is asked to feed back problems, benefits, and/or suggestions
+about the software to the Fermilab Software Providers.
+
+Neither the name of Fermilab, the  URA, nor the names of the contributors
+may be used to endorse or promote products derived from this software
+without specific prior written permission.
+
+DISCLAIMER OF LIABILITY (BSD):
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+"AS IS" AND ANY EXPRESS OR IMPLIED  WARRANTIES, INCLUDING, BUT NOT
+LIMITED TO, THE IMPLIED  WARRANTIES OF MERCHANTABILITY AND FITNESS
+FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL FERMILAB,
+OR THE URA, OR THE U.S. DEPARTMENT of ENERGY, OR CONTRIBUTORS BE LIABLE
+FOR  ANY  DIRECT, INDIRECT,  INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
+OF SUBSTITUTE  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY  OF
+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE  POSSIBILITY OF SUCH DAMAGE.
+
+Liabilities of the Government:
+
+This software is provided by URA, independent from its Prime Contract
+with the U.S. Department of Energy. URA is acting independently from
+the Government and in its own private capacity and is not acting on
+behalf of the U.S. Government, nor as its contractor nor its agent.
+Correspondingly, it is understood and agreed that the U.S. Government
+has no connection to this software and in no manner whatsoever shall
+be liable for nor assume any responsibility or obligation for any claim,
+cost, or damages arising out of or resulting from the use of the software
+available from this server.
+
+Export Control:
+
+All documents and software available from this server are subject to U.S.
+export control laws.  Anyone downloading information from this server is
+obligated to secure any necessary Government licenses before exporting
+documents or software obtained from this server.
+ */
+package org.dcache.services.bulk.job;
+
+import com.google.common.collect.ImmutableMap;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.ServiceLoader;
+
+import dmg.cells.nucleus.CellLifeCycleAware;
+
+import org.dcache.services.bulk.BulkRequest;
+import org.dcache.services.bulk.BulkServiceException;
+
+/**
+ *  Creates jobs on the basis of activity mappings.
+ *
+ *  For each activity (such as pinning, deletion, etc.), there must be
+ *  an SPI provider which creates the correct class of job and
+ *  also returns the properly constructed request and expansion job for this
+ *  activity.
+ */
+public class BulkJobFactory implements CellLifeCycleAware
+{
+    private final Map<String, BulkJobProvider> providers
+                    = Collections.synchronizedMap(new HashMap<>());
+
+    @Override
+    public void afterStart()
+    {
+        ServiceLoader<BulkJobProvider> serviceLoader
+                        = ServiceLoader.load(BulkJobProvider.class);
+        for (BulkJobProvider provider : serviceLoader) {
+            providers.put(provider.getActivity(), provider);
+        }
+    }
+
+    public Map<String, BulkJobProvider> getProviders()
+    {
+        return ImmutableMap.copyOf(providers);
+    }
+
+    public BulkRequestJob createRequestJob(BulkRequest request)
+                    throws BulkServiceException
+    {
+        String activity = request.getActivity();
+        BulkJobProvider provider = providers.get(activity);
+        if (provider == null) {
+            throw new BulkServiceException("cannot create BulkRequestJob; "
+                                                           + "no such activity: "
+                                                           + activity);
+        }
+        return provider.createRequestJob(request);
+    }
+
+    public TargetExpansionJob createTargetExpansionJob(BulkJobKey parentKey,
+                                                       BulkRequest request)
+                    throws BulkServiceException
+    {
+        String activity = request.getActivity();
+        BulkJobProvider provider = providers.get(activity);
+        if (provider == null) {
+            throw new BulkServiceException("cannot create TargetExpansionJob; "
+                                                           + "no such activity: "
+                                                           + activity);
+        }
+        return provider.createExpansionJob(parentKey, request);
+    }
+
+    public SingleTargetJob createSingleTargetJob(BulkJobKey parentKey,
+                                                 String activity)
+                    throws BulkServiceException
+    {
+        return createSingleTargetJob(null, parentKey, activity);
+    }
+
+    public SingleTargetJob createSingleTargetJob(BulkJobKey key,
+                                                 BulkJobKey parentKey,
+                                                 String activity)
+                    throws BulkServiceException
+    {
+        BulkJobProvider provider = providers.get(activity);
+        if (provider == null) {
+            throw new BulkServiceException("cannot create SingleTargetJob; "
+                                                           + "no such activity: "
+                                                           + activity);
+        }
+
+        return provider.createJob(key == null ? BulkJobKey.newKey(parentKey.getRequestId())
+                                              : key,
+                                  parentKey);
+    }
+}
diff --git a/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/job/BulkJobProvider.java b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/job/BulkJobProvider.java
new file mode 100644
index 0000000000..abea6d296e
--- /dev/null
+++ b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/job/BulkJobProvider.java
@@ -0,0 +1,130 @@
+/*
+COPYRIGHT STATUS:
+Dec 1st 2001, Fermi National Accelerator Laboratory (FNAL) documents and
+software are sponsored by the U.S. Department of Energy under Contract No.
+DE-AC02-76CH03000. Therefore, the U.S. Government retains a  world-wide
+non-exclusive, royalty-free license to publish or reproduce these documents
+and software for U.S. Government purposes.  All documents and software
+available from this server are protected under the U.S. and Foreign
+Copyright Laws, and FNAL reserves all rights.
+
+Distribution of the software available from this server is free of
+charge subject to the user following the terms of the Fermitools
+Software Legal Information.
+
+Redistribution and/or modification of the software shall be accompanied
+by the Fermitools Software Legal Information  (including the copyright
+notice).
+
+The user is asked to feed back problems, benefits, and/or suggestions
+about the software to the Fermilab Software Providers.
+
+Neither the name of Fermilab, the  URA, nor the names of the contributors
+may be used to endorse or promote products derived from this software
+without specific prior written permission.
+
+DISCLAIMER OF LIABILITY (BSD):
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+"AS IS" AND ANY EXPRESS OR IMPLIED  WARRANTIES, INCLUDING, BUT NOT
+LIMITED TO, THE IMPLIED  WARRANTIES OF MERCHANTABILITY AND FITNESS
+FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL FERMILAB,
+OR THE URA, OR THE U.S. DEPARTMENT of ENERGY, OR CONTRIBUTORS BE LIABLE
+FOR  ANY  DIRECT, INDIRECT,  INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
+OF SUBSTITUTE  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY  OF
+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE  POSSIBILITY OF SUCH DAMAGE.
+
+Liabilities of the Government:
+
+This software is provided by URA, independent from its Prime Contract
+with the U.S. Department of Energy. URA is acting independently from
+the Government and in its own private capacity and is not acting on
+behalf of the U.S. Government, nor as its contractor nor its agent.
+Correspondingly, it is understood and agreed that the U.S. Government
+has no connection to this software and in no manner whatsoever shall
+be liable for nor assume any responsibility or obligation for any claim,
+cost, or damages arising out of or resulting from the use of the software
+available from this server.
+
+Export Control:
+
+All documents and software available from this server are subject to U.S.
+export control laws.  Anyone downloading information from this server is
+obligated to secure any necessary Government licenses before exporting
+documents or software obtained from this server.
+ */
+package org.dcache.services.bulk.job;
+
+import org.dcache.services.bulk.BulkRequest;
+import org.dcache.services.bulk.BulkServiceException;
+import org.dcache.services.bulk.job.MultipleTargetJob.TargetType;
+import org.dcache.services.bulk.job.TargetExpansionJob.ExpansionType;
+
+/**
+ * Service-provider base for loading implementations of SingleTargetJobs.
+ *
+ * Provides the proper expansion job for this type of activity.
+ *
+ * @param <J> subclass of the single target job provided for this activity.
+ */
+public abstract class BulkJobProvider<J extends SingleTargetJob>
+{
+    /**
+     * Shared creation routine for all job types for creating the top-level
+     * request job.
+     *
+     * @param request associated with this job.
+     * @return correctly constructed BulkRequestJob.
+     * @throws BulkServiceException
+     */
+    public BulkRequestJob createRequestJob(BulkRequest request)
+                    throws BulkServiceException
+    {
+        return new BulkRequestJob(BulkJobKey.newKey(request.getId()),
+                                  request,
+                                  getTargetType());
+    }
+
+    /**
+     * Shared creation routine for all job types for directory targets to
+     * be expanded.
+     *
+     * @param parentKey of the creating multiple target job.
+     * @param request associated with this job.
+     * @return correctly constructed TargetExpansionJob.
+     * @throws BulkServiceException
+     */
+    public TargetExpansionJob createExpansionJob(BulkJobKey parentKey,
+                                                 BulkRequest request)
+                    throws BulkServiceException
+    {
+        return new TargetExpansionJob(BulkJobKey.newKey(request.getId()),
+                                                        parentKey,
+                                                        request,
+                                                        getTargetType(),
+                                                        getExpansionAlgorithm());
+    }
+
+    /**
+     * Creates an instance of the specific job type to be configured by handler.
+     *
+     * @param key of the job.
+     * @param parentKey of the job.
+     * @return instance of job.
+     * @throws BulkServiceException
+     */
+    public abstract J createJob(BulkJobKey key, BulkJobKey parentKey)
+                    throws BulkServiceException;
+
+    public abstract String getActivity();
+
+    public abstract ExpansionType getExpansionAlgorithm();
+
+    public abstract Class<J> getJobClass();
+
+    public abstract TargetType getTargetType();
+}
diff --git a/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/plugins/BFirstWalkJob.java b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/plugins/BFirstWalkJob.java
new file mode 100644
index 0000000000..eaf4f49da6
--- /dev/null
+++ b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/plugins/BFirstWalkJob.java
@@ -0,0 +1,121 @@
+/*
+COPYRIGHT STATUS:
+Dec 1st 2001, Fermi National Accelerator Laboratory (FNAL) documents and
+software are sponsored by the U.S. Department of Energy under Contract No.
+DE-AC02-76CH03000. Therefore, the U.S. Government retains a  world-wide
+non-exclusive, royalty-free license to publish or reproduce these documents
+and software for U.S. Government purposes.  All documents and software
+available from this server are protected under the U.S. and Foreign
+Copyright Laws, and FNAL reserves all rights.
+
+Distribution of the software available from this server is free of
+charge subject to the user following the terms of the Fermitools
+Software Legal Information.
+
+Redistribution and/or modification of the software shall be accompanied
+by the Fermitools Software Legal Information  (including the copyright
+notice).
+
+The user is asked to feed back problems, benefits, and/or suggestions
+about the software to the Fermilab Software Providers.
+
+Neither the name of Fermilab, the  URA, nor the names of the contributors
+may be used to endorse or promote products derived from this software
+without specific prior written permission.
+
+DISCLAIMER OF LIABILITY (BSD):
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+"AS IS" AND ANY EXPRESS OR IMPLIED  WARRANTIES, INCLUDING, BUT NOT
+LIMITED TO, THE IMPLIED  WARRANTIES OF MERCHANTABILITY AND FITNESS
+FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL FERMILAB,
+OR THE URA, OR THE U.S. DEPARTMENT of ENERGY, OR CONTRIBUTORS BE LIABLE
+FOR  ANY  DIRECT, INDIRECT,  INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
+OF SUBSTITUTE  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY  OF
+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE  POSSIBILITY OF SUCH DAMAGE.
+
+Liabilities of the Government:
+
+This software is provided by URA, independent from its Prime Contract
+with the U.S. Department of Energy. URA is acting independently from
+the Government and in its own private capacity and is not acting on
+behalf of the U.S. Government, nor as its contractor nor its agent.
+Correspondingly, it is understood and agreed that the U.S. Government
+has no connection to this software and in no manner whatsoever shall
+be liable for nor assume any responsibility or obligation for any claim,
+cost, or damages arising out of or resulting from the use of the software
+available from this server.
+
+Export Control:
+
+All documents and software available from this server are subject to U.S.
+export control laws.  Anyone downloading information from this server is
+obligated to secure any necessary Government licenses before exporting
+documents or software obtained from this server.
+ */
+package org.dcache.services.bulk.plugins;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+
+import org.dcache.services.bulk.job.BulkJobKey;
+import org.dcache.services.bulk.job.SingleTargetJob;
+
+/**
+ *  A test job that can be run through the admin interface.
+ */
+public final class BFirstWalkJob extends SingleTargetJob
+{
+    private static final Logger LOGGER = LoggerFactory.getLogger(BFirstWalkJob.class);
+
+    static Long getDuration(Map<String, String> arguments)
+    {
+        if (arguments == null) {
+            return null;
+        }
+        
+        String delay = arguments.get("delay");
+        String unit = arguments.get("delay-unit");
+
+        Long duration = delay == null ? null
+                        : unit == null ? TimeUnit.SECONDS.toMillis(Long.valueOf(delay))
+                        : TimeUnit.valueOf(unit).toMillis(Long.valueOf(delay));
+
+        return duration;
+    }
+
+    public BFirstWalkJob(BulkJobKey key,
+                         BulkJobKey parentKey,
+                         String activity)
+    {
+        super(key, parentKey, activity);
+    }
+
+    @Override
+    protected void doRun()
+    {
+        Long duration = getDuration(arguments);
+
+        try {
+            if (duration != null) {
+                Thread.sleep(duration);
+            }
+        } catch (InterruptedException e) {
+            LOGGER.info("BFirstWalkJob interrupted, [{}] [{}] [{}]",
+                        attributes.getPnfsId(),
+                        attributes.getFileType(),
+                        path);
+        }
+        LOGGER.info("BFirstWalkJob [{}] [{}] [{}]",
+                    attributes.getPnfsId(),
+                    attributes.getFileType(),
+                    path);
+    }
+}
diff --git a/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/plugins/BFirstWalkJobProvider.java b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/plugins/BFirstWalkJobProvider.java
new file mode 100644
index 0000000000..43047bd640
--- /dev/null
+++ b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/plugins/BFirstWalkJobProvider.java
@@ -0,0 +1,107 @@
+/*
+COPYRIGHT STATUS:
+Dec 1st 2001, Fermi National Accelerator Laboratory (FNAL) documents and
+software are sponsored by the U.S. Department of Energy under Contract No.
+DE-AC02-76CH03000. Therefore, the U.S. Government retains a  world-wide
+non-exclusive, royalty-free license to publish or reproduce these documents
+and software for U.S. Government purposes.  All documents and software
+available from this server are protected under the U.S. and Foreign
+Copyright Laws, and FNAL reserves all rights.
+
+Distribution of the software available from this server is free of
+charge subject to the user following the terms of the Fermitools
+Software Legal Information.
+
+Redistribution and/or modification of the software shall be accompanied
+by the Fermitools Software Legal Information  (including the copyright
+notice).
+
+The user is asked to feed back problems, benefits, and/or suggestions
+about the software to the Fermilab Software Providers.
+
+Neither the name of Fermilab, the  URA, nor the names of the contributors
+may be used to endorse or promote products derived from this software
+without specific prior written permission.
+
+DISCLAIMER OF LIABILITY (BSD):
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+"AS IS" AND ANY EXPRESS OR IMPLIED  WARRANTIES, INCLUDING, BUT NOT
+LIMITED TO, THE IMPLIED  WARRANTIES OF MERCHANTABILITY AND FITNESS
+FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL FERMILAB,
+OR THE URA, OR THE U.S. DEPARTMENT of ENERGY, OR CONTRIBUTORS BE LIABLE
+FOR  ANY  DIRECT, INDIRECT,  INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
+OF SUBSTITUTE  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY  OF
+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE  POSSIBILITY OF SUCH DAMAGE.
+
+Liabilities of the Government:
+
+This software is provided by URA, independent from its Prime Contract
+with the U.S. Department of Energy. URA is acting independently from
+the Government and in its own private capacity and is not acting on
+behalf of the U.S. Government, nor as its contractor nor its agent.
+Correspondingly, it is understood and agreed that the U.S. Government
+has no connection to this software and in no manner whatsoever shall
+be liable for nor assume any responsibility or obligation for any claim,
+cost, or damages arising out of or resulting from the use of the software
+available from this server.
+
+Export Control:
+
+All documents and software available from this server are subject to U.S.
+export control laws.  Anyone downloading information from this server is
+obligated to secure any necessary Government licenses before exporting
+documents or software obtained from this server.
+ */
+package org.dcache.services.bulk.plugins;
+
+import org.dcache.services.bulk.job.BulkJobKey;
+import org.dcache.services.bulk.job.BulkJobProvider;
+import org.dcache.services.bulk.job.MultipleTargetJob.TargetType;
+import org.dcache.services.bulk.job.TargetExpansionJob.ExpansionType;
+
+import static org.dcache.services.bulk.job.MultipleTargetJob.TargetType.BOTH;
+
+/**
+ *  Provides a test activity for admin interface testing.
+ */
+public class BFirstWalkJobProvider extends BulkJobProvider<BFirstWalkJob>
+{
+    private final String activity = "BREADTH-FIRST-WALK";
+    private final TargetType targetType = BOTH;
+    private final ExpansionType expansionType = ExpansionType.BREADTH_FIRST;
+
+    @Override
+    public BFirstWalkJob createJob(BulkJobKey key, BulkJobKey parentKey)
+    {
+        return new BFirstWalkJob(key, parentKey, activity);
+    }
+
+    @Override
+    public String getActivity()
+    {
+        return activity;
+    }
+
+    @Override
+    public ExpansionType getExpansionAlgorithm()
+    {
+        return expansionType;
+    }
+
+    @Override
+    public Class<BFirstWalkJob> getJobClass()
+    {
+        return BFirstWalkJob.class;
+    }
+
+    @Override
+    public TargetType getTargetType()
+    {
+        return targetType;
+    }
+}
diff --git a/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/plugins/DFirstWalkJob.java b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/plugins/DFirstWalkJob.java
new file mode 100644
index 0000000000..9a493f6137
--- /dev/null
+++ b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/plugins/DFirstWalkJob.java
@@ -0,0 +1,102 @@
+/*
+COPYRIGHT STATUS:
+Dec 1st 2001, Fermi National Accelerator Laboratory (FNAL) documents and
+software are sponsored by the U.S. Department of Energy under Contract No.
+DE-AC02-76CH03000. Therefore, the U.S. Government retains a  world-wide
+non-exclusive, royalty-free license to publish or reproduce these documents
+and software for U.S. Government purposes.  All documents and software
+available from this server are protected under the U.S. and Foreign
+Copyright Laws, and FNAL reserves all rights.
+
+Distribution of the software available from this server is free of
+charge subject to the user following the terms of the Fermitools
+Software Legal Information.
+
+Redistribution and/or modification of the software shall be accompanied
+by the Fermitools Software Legal Information  (including the copyright
+notice).
+
+The user is asked to feed back problems, benefits, and/or suggestions
+about the software to the Fermilab Software Providers.
+
+Neither the name of Fermilab, the  URA, nor the names of the contributors
+may be used to endorse or promote products derived from this software
+without specific prior written permission.
+
+DISCLAIMER OF LIABILITY (BSD):
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+"AS IS" AND ANY EXPRESS OR IMPLIED  WARRANTIES, INCLUDING, BUT NOT
+LIMITED TO, THE IMPLIED  WARRANTIES OF MERCHANTABILITY AND FITNESS
+FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL FERMILAB,
+OR THE URA, OR THE U.S. DEPARTMENT of ENERGY, OR CONTRIBUTORS BE LIABLE
+FOR  ANY  DIRECT, INDIRECT,  INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
+OF SUBSTITUTE  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY  OF
+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE  POSSIBILITY OF SUCH DAMAGE.
+
+Liabilities of the Government:
+
+This software is provided by URA, independent from its Prime Contract
+with the U.S. Department of Energy. URA is acting independently from
+the Government and in its own private capacity and is not acting on
+behalf of the U.S. Government, nor as its contractor nor its agent.
+Correspondingly, it is understood and agreed that the U.S. Government
+has no connection to this software and in no manner whatsoever shall
+be liable for nor assume any responsibility or obligation for any claim,
+cost, or damages arising out of or resulting from the use of the software
+available from this server.
+
+Export Control:
+
+All documents and software available from this server are subject to U.S.
+export control laws.  Anyone downloading information from this server is
+obligated to secure any necessary Government licenses before exporting
+documents or software obtained from this server.
+ */
+package org.dcache.services.bulk.plugins;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import org.dcache.services.bulk.job.BulkJobKey;
+import org.dcache.services.bulk.job.SingleTargetJob;
+
+/**
+ *  A test job that can be run through the admin interface.
+ */
+public final class DFirstWalkJob extends SingleTargetJob
+{
+    private static final Logger LOGGER = LoggerFactory.getLogger(DFirstWalkJob.class);
+
+    public DFirstWalkJob(BulkJobKey key,
+                         BulkJobKey parentKey,
+                         String activity)
+    {
+        super(key, parentKey, activity);
+    }
+
+    @Override
+    protected void doRun()
+    {
+        Long duration = BFirstWalkJob.getDuration(arguments);
+
+        try {
+            if (duration != null) {
+                Thread.sleep(duration);
+            }
+        } catch (InterruptedException e) {
+            LOGGER.info("DFirstWalkJob interrupted, [{}] [{}] [{}]",
+                        attributes.getPnfsId(),
+                        attributes.getFileType(),
+                        path);
+        }
+        LOGGER.info("DFirstWalkJob [{}] [{}] [{}]",
+                    attributes.getPnfsId(),
+                    attributes.getFileType(),
+                    path);
+    }
+}
diff --git a/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/plugins/DFirstWalkJobProvider.java b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/plugins/DFirstWalkJobProvider.java
new file mode 100644
index 0000000000..f837bfcd89
--- /dev/null
+++ b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/plugins/DFirstWalkJobProvider.java
@@ -0,0 +1,107 @@
+/*
+COPYRIGHT STATUS:
+Dec 1st 2001, Fermi National Accelerator Laboratory (FNAL) documents and
+software are sponsored by the U.S. Department of Energy under Contract No.
+DE-AC02-76CH03000. Therefore, the U.S. Government retains a  world-wide
+non-exclusive, royalty-free license to publish or reproduce these documents
+and software for U.S. Government purposes.  All documents and software
+available from this server are protected under the U.S. and Foreign
+Copyright Laws, and FNAL reserves all rights.
+
+Distribution of the software available from this server is free of
+charge subject to the user following the terms of the Fermitools
+Software Legal Information.
+
+Redistribution and/or modification of the software shall be accompanied
+by the Fermitools Software Legal Information  (including the copyright
+notice).
+
+The user is asked to feed back problems, benefits, and/or suggestions
+about the software to the Fermilab Software Providers.
+
+Neither the name of Fermilab, the  URA, nor the names of the contributors
+may be used to endorse or promote products derived from this software
+without specific prior written permission.
+
+DISCLAIMER OF LIABILITY (BSD):
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+"AS IS" AND ANY EXPRESS OR IMPLIED  WARRANTIES, INCLUDING, BUT NOT
+LIMITED TO, THE IMPLIED  WARRANTIES OF MERCHANTABILITY AND FITNESS
+FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL FERMILAB,
+OR THE URA, OR THE U.S. DEPARTMENT of ENERGY, OR CONTRIBUTORS BE LIABLE
+FOR  ANY  DIRECT, INDIRECT,  INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
+OF SUBSTITUTE  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY  OF
+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE  POSSIBILITY OF SUCH DAMAGE.
+
+Liabilities of the Government:
+
+This software is provided by URA, independent from its Prime Contract
+with the U.S. Department of Energy. URA is acting independently from
+the Government and in its own private capacity and is not acting on
+behalf of the U.S. Government, nor as its contractor nor its agent.
+Correspondingly, it is understood and agreed that the U.S. Government
+has no connection to this software and in no manner whatsoever shall
+be liable for nor assume any responsibility or obligation for any claim,
+cost, or damages arising out of or resulting from the use of the software
+available from this server.
+
+Export Control:
+
+All documents and software available from this server are subject to U.S.
+export control laws.  Anyone downloading information from this server is
+obligated to secure any necessary Government licenses before exporting
+documents or software obtained from this server.
+ */
+package org.dcache.services.bulk.plugins;
+
+import org.dcache.services.bulk.job.BulkJobKey;
+import org.dcache.services.bulk.job.BulkJobProvider;
+import org.dcache.services.bulk.job.MultipleTargetJob.TargetType;
+import org.dcache.services.bulk.job.TargetExpansionJob.ExpansionType;
+
+import static org.dcache.services.bulk.job.MultipleTargetJob.TargetType.BOTH;
+
+/**
+ *  Provides a test activity for admin interface testing.
+ */
+public class DFirstWalkJobProvider extends BulkJobProvider<DFirstWalkJob>
+{
+    private final String activity = "DEPTH-FIRST-WALK";
+    private final TargetType targetType = BOTH;
+    private final ExpansionType expansionType = ExpansionType.DEPTH_FIRST;
+
+    @Override
+    public DFirstWalkJob createJob(BulkJobKey key, BulkJobKey parentKey)
+    {
+        return new DFirstWalkJob(key, parentKey, activity);
+    }
+
+    @Override
+    public String getActivity()
+    {
+        return activity;
+    }
+
+    @Override
+    public ExpansionType getExpansionAlgorithm()
+    {
+        return expansionType;
+    }
+
+    @Override
+    public Class<DFirstWalkJob> getJobClass()
+    {
+        return DFirstWalkJob.class;
+    }
+
+    @Override
+    public TargetType getTargetType()
+    {
+        return targetType;
+    }
+}
diff --git a/modules/dcache-bulk/src/main/resources/META-INF/services/org.dcache.services.bulk.job.BulkJobProvider b/modules/dcache-bulk/src/main/resources/META-INF/services/org.dcache.services.bulk.job.BulkJobProvider
new file mode 100644
index 0000000000..b18f7a1306
--- /dev/null
+++ b/modules/dcache-bulk/src/main/resources/META-INF/services/org.dcache.services.bulk.job.BulkJobProvider
@@ -0,0 +1,2 @@
+org.dcache.services.bulk.plugins.BFirstWalkJobProvider
+org.dcache.services.bulk.plugins.DFirstWalkJobProvider
diff --git a/modules/dcache-vehicles/src/main/java/org/dcache/services/bulk/BulkRequest.java b/modules/dcache-vehicles/src/main/java/org/dcache/services/bulk/BulkRequest.java
index 47053e175b..24363e669e 100644
--- a/modules/dcache-vehicles/src/main/java/org/dcache/services/bulk/BulkRequest.java
+++ b/modules/dcache-vehicles/src/main/java/org/dcache/services/bulk/BulkRequest.java
@@ -83,7 +83,7 @@ public class BulkRequest implements Serializable
     private Boolean                   clearOnSuccess;
     private Boolean                   clearOnFailure;
     private Integer                   delayClear;
-    private Map<String, String>       arguments;
+    private Map<String, String> arguments;
     private Depth                     expandDirectories;
 
     public String getActivity()
