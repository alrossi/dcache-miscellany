diff --git a/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/QoSEngineAware.java b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/QoSEngineAware.java
new file mode 100644
index 0000000000000000000000000000000000000000..678637c70efb0275c5484e3af6e43f6e7c7f0eae
--- /dev/null
+++ b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/QoSEngineAware.java
@@ -0,0 +1,86 @@
+/*
+COPYRIGHT STATUS:
+Dec 1st 2001, Fermi National Accelerator Laboratory (FNAL) documents and
+software are sponsored by the U.S. Department of Energy under Contract No.
+DE-AC02-76CH03000. Therefore, the U.S. Government retains a  world-wide
+non-exclusive, royalty-free license to publish or reproduce these documents
+and software for U.S. Government purposes.  All documents and software
+available from this server are protected under the U.S. and Foreign
+Copyright Laws, and FNAL reserves all rights.
+
+Distribution of the software available from this server is free of
+charge subject to the user following the terms of the Fermitools
+Software Legal Information.
+
+Redistribution and/or modification of the software shall be accompanied
+by the Fermitools Software Legal Information  (including the copyright
+notice).
+
+The user is asked to feed back problems, benefits, and/or suggestions
+about the software to the Fermilab Software Providers.
+
+Neither the name of Fermilab, the  URA, nor the names of the contributors
+may be used to endorse or promote products derived from this software
+without specific prior written permission.
+
+DISCLAIMER OF LIABILITY (BSD):
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+"AS IS" AND ANY EXPRESS OR IMPLIED  WARRANTIES, INCLUDING, BUT NOT
+LIMITED TO, THE IMPLIED  WARRANTIES OF MERCHANTABILITY AND FITNESS
+FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL FERMILAB,
+OR THE URA, OR THE U.S. DEPARTMENT of ENERGY, OR CONTRIBUTORS BE LIABLE
+FOR  ANY  DIRECT, INDIRECT,  INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
+OF SUBSTITUTE  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY  OF
+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE  POSSIBILITY OF SUCH DAMAGE.
+
+Liabilities of the Government:
+
+This software is provided by URA, independent from its Prime Contract
+with the U.S. Department of Energy. URA is acting independently from
+the Government and in its own private capacity and is not acting on
+behalf of the U.S. Government, nor as its contractor nor its agent.
+Correspondingly, it is understood and agreed that the U.S. Government
+has no connection to this software and in no manner whatsoever shall
+be liable for nor assume any responsibility or obligation for any claim,
+cost, or damages arising out of or resulting from the use of the software
+available from this server.
+
+Export Control:
+
+All documents and software available from this server are subject to U.S.
+export control laws.  Anyone downloading information from this server is
+obligated to secure any necessary Government licenses before exporting
+documents or software obtained from this server.
+ */
+package org.dcache.services.bulk;
+
+import org.dcache.cells.CellStub;
+import org.dcache.services.bulk.util.QoSResponseReceiver;
+import org.dcache.vehicles.qos.QoSTransitionCompletedMessage;
+
+public interface QoSEngineAware
+{
+    /**
+     *  If a single-target job implements this interface, the handler
+     *  will inject the stub.
+     *  <p>
+     *  Used primarily for testing.
+     */
+    void setQoSEngine(CellStub qosEngine);
+
+    /**
+     *  If a single-target job implements this interface, the handler
+     *  will also inject the receiver
+     */
+    void setQoSResponseReceiver(QoSResponseReceiver receiver);
+
+    /**
+     *  For relaying the received transition message.
+     */
+    void relay(QoSTransitionCompletedMessage message);
+}
diff --git a/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/job/BulkJobFactory.java b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/job/BulkJobFactory.java
index 09902cf4186449d26438eb6b9e2eba957bf468ee..30918626fdf60d4b7421830a53fb9a7988614688 100644
--- a/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/job/BulkJobFactory.java
+++ b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/job/BulkJobFactory.java
@@ -60,6 +60,8 @@ documents or software obtained from this server.
 package org.dcache.services.bulk.job;
 
 import com.google.common.collect.ImmutableMap;
+import diskCacheV111.poolManager.PoolManagerAware;
+import diskCacheV111.util.NamespaceHandlerAware;
 import diskCacheV111.util.PnfsHandler;
 import dmg.cells.nucleus.CellEndpoint;
 import dmg.cells.nucleus.CellLifeCycleAware;
@@ -71,15 +73,15 @@ import java.util.ServiceLoader;
 import javax.security.auth.Subject;
 import org.dcache.auth.attributes.Restriction;
 import org.dcache.cells.CellStub;
+import org.dcache.pinmanager.PinManagerAware;
 import org.dcache.poolmanager.PoolMonitor;
+import org.dcache.poolmanager.PoolMonitorAware;
 import org.dcache.services.bulk.BulkRequest;
 import org.dcache.services.bulk.BulkServiceException;
-import diskCacheV111.util.NamespaceHandlerAware;
-import org.dcache.pinmanager.PinManagerAware;
 import org.dcache.services.bulk.PingServiceAware;
-import diskCacheV111.poolManager.PoolManagerAware;
-import org.dcache.poolmanager.PoolMonitorAware;
+import org.dcache.services.bulk.QoSEngineAware;
 import org.dcache.services.bulk.handlers.BulkJobCompletionHandler;
+import org.dcache.services.bulk.util.QoSResponseReceiver;
 import org.dcache.vehicles.FileAttributes;
 import org.springframework.beans.factory.annotation.Required;
 
@@ -98,7 +100,9 @@ public class BulkJobFactory implements CellLifeCycleAware, CellMessageSender {
   private CellStub pinManager;
   private CellStub poolManager;
   private CellStub pingService;
+  private CellStub qosEngine;
   private PoolMonitor poolMonitor;
+  private QoSResponseReceiver qoSResponseReceiver;
   private CellEndpoint endpoint;
 
   @Override
@@ -131,6 +135,17 @@ public class BulkJobFactory implements CellLifeCycleAware, CellMessageSender {
     this.poolMonitor = poolMonitor;
   }
 
+  @Required
+  public void setQosEngine(CellStub qosEngine) {
+    this.qosEngine = qosEngine;
+  }
+
+  @Required
+  public void setQoSResponseReceiver(QoSResponseReceiver qoSResponseReceiver)
+  {
+    this.qoSResponseReceiver = qoSResponseReceiver;
+  }
+
   @Override
   public void afterStart() {
     ServiceLoader<BulkJobProvider> serviceLoader
@@ -229,6 +244,12 @@ public class BulkJobFactory implements CellLifeCycleAware, CellMessageSender {
       ((PingServiceAware) job).setPingService(pingService);
     }
 
+    if (job instanceof QoSEngineAware) {
+      QoSEngineAware engineAware = (QoSEngineAware)job;
+      engineAware.setQoSEngine(qosEngine);
+      engineAware.setQoSResponseReceiver(qoSResponseReceiver);
+    }
+
     if (job instanceof CellMessageSender) {
       ((CellMessageSender) job).setCellEndpoint(endpoint);
     }
diff --git a/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/plugins/qosengine/UpdateQoSJob.java b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/plugins/qosengine/UpdateQoSJob.java
new file mode 100644
index 0000000000000000000000000000000000000000..662cd1c18bcc05cd2d36d271794ee80feeb355bc
--- /dev/null
+++ b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/plugins/qosengine/UpdateQoSJob.java
@@ -0,0 +1,178 @@
+/*
+COPYRIGHT STATUS:
+Dec 1st 2001, Fermi National Accelerator Laboratory (FNAL) documents and
+software are sponsored by the U.S. Department of Energy under Contract No.
+DE-AC02-76CH03000. Therefore, the U.S. Government retains a  world-wide
+non-exclusive, royalty-free license to publish or reproduce these documents
+and software for U.S. Government purposes.  All documents and software
+available from this server are protected under the U.S. and Foreign
+Copyright Laws, and FNAL reserves all rights.
+
+Distribution of the software available from this server is free of
+charge subject to the user following the terms of the Fermitools
+Software Legal Information.
+
+Redistribution and/or modification of the software shall be accompanied
+by the Fermitools Software Legal Information  (including the copyright
+notice).
+
+The user is asked to feed back problems, benefits, and/or suggestions
+about the software to the Fermilab Software Providers.
+
+Neither the name of Fermilab, the  URA, nor the names of the contributors
+may be used to endorse or promote products derived from this software
+without specific prior written permission.
+
+DISCLAIMER OF LIABILITY (BSD):
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+"AS IS" AND ANY EXPRESS OR IMPLIED  WARRANTIES, INCLUDING, BUT NOT
+LIMITED TO, THE IMPLIED  WARRANTIES OF MERCHANTABILITY AND FITNESS
+FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL FERMILAB,
+OR THE URA, OR THE U.S. DEPARTMENT of ENERGY, OR CONTRIBUTORS BE LIABLE
+FOR  ANY  DIRECT, INDIRECT,  INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
+OF SUBSTITUTE  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY  OF
+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE  POSSIBILITY OF SUCH DAMAGE.
+
+Liabilities of the Government:
+
+This software is provided by URA, independent from its Prime Contract
+with the U.S. Department of Energy. URA is acting independently from
+the Government and in its own private capacity and is not acting on
+behalf of the U.S. Government, nor as its contractor nor its agent.
+Correspondingly, it is understood and agreed that the U.S. Government
+has no connection to this software and in no manner whatsoever shall
+be liable for nor assume any responsibility or obligation for any claim,
+cost, or damages arising out of or resulting from the use of the software
+available from this server.
+
+Export Control:
+
+All documents and software available from this server are subject to U.S.
+export control laws.  Anyone downloading information from this server is
+obligated to secure any necessary Government licenses before exporting
+documents or software obtained from this server.
+ */
+package org.dcache.services.bulk.plugins.qosengine;
+
+import diskCacheV111.util.PnfsId;
+import java.util.concurrent.TimeUnit;
+import org.dcache.cells.CellStub;
+import org.dcache.qos.QoSException;
+import org.dcache.qos.data.FileQoSRequirements;
+import org.dcache.qos.data.QoSAction;
+import org.dcache.qos.remote.clients.RemoteQoSRequirementsClient;
+import org.dcache.services.bulk.QoSEngineAware;
+import org.dcache.services.bulk.job.BulkJobKey;
+import org.dcache.services.bulk.job.SingleTargetJob;
+import org.dcache.services.bulk.util.QoSResponseReceiver;
+import org.dcache.vehicles.qos.QoSTransitionCompletedMessage;
+
+import static org.dcache.services.bulk.plugins.qosengine.UpdateQoSJobProvider.TARGET_QOS;
+
+/**
+ *  Transition as single file from its current QoS to a new one.
+ */
+public class UpdateQoSJob extends SingleTargetJob implements QoSEngineAware {
+  private QoSResponseReceiver responseReceiver;
+  private CellStub qosEngine;
+
+  public UpdateQoSJob(BulkJobKey key, BulkJobKey parentKey, String activity) {
+    super(key, parentKey, activity);
+  }
+
+  @Override
+  public synchronized boolean cancel() {
+    RemoteQoSRequirementsClient client = new RemoteQoSRequirementsClient();
+    client.setRequirementsService(qosEngine);
+    PnfsId pnfsId = attributes.getPnfsId();
+    try {
+      client.fileQoSRequirementsModifiedCancelled(pnfsId);
+    } catch (QoSException e) {
+      LOGGER.error("fileQoSRequirementsModifiedCancelled failed: {}, {}.", pnfsId, e.getMessage());
+    }
+    return super.cancel();
+  }
+
+  @Override
+  public void relay(QoSTransitionCompletedMessage message) {
+    PnfsId pnsfId = message.getPnfsId();
+    QoSAction action = message.getAction();
+    Object error = message.getErrorObject();
+    if (error != null) {
+      String errorMessage;
+      if (error instanceof Throwable) {
+        errorMessage = ((Throwable) error).getMessage();
+      } else {
+        errorMessage = error.toString();
+      }
+      LOGGER.error("QoS migration failed: {}, {}, {}.", pnsfId, action, errorMessage);
+      setError(error);
+    } else {
+      LOGGER.debug("QoS migration completed: {}, {}.", pnsfId, action);
+      setState(State.COMPLETED);
+    }
+  }
+
+  @Override
+  protected void doRun() {
+    if (arguments == null) {
+      setError(new IllegalArgumentException("no target qos given."));
+      return;
+    }
+
+    FileQoSRequirements requirements = new FileQoSRequirements(attributes.getPnfsId(), attributes);
+
+    String targetQos = arguments.get(TARGET_QOS.getName());
+    if (targetQos == null) {
+      setError(new IllegalArgumentException("no target qos given."));
+      return;
+    }
+
+    if (targetQos.contains("disk")) {
+      requirements.setRequiredDisk(1);
+    }
+
+    if (targetQos.contains("tape")) {
+      requirements.setRequiredTape(1);
+    }
+
+    responseReceiver.register(attributes.getPnfsId().toString(), this);
+
+    RemoteQoSRequirementsClient client = new RemoteQoSRequirementsClient();
+    client.setRequirementsService(qosEngine);
+    client.fileQoSRequirementsModified(requirements);
+
+    /*
+     *  Moving too quickly into the WAITING state can cause unfair starvation of
+     *  later-arriving requests.
+     *
+     *  Let's be a good citizen and consider ourselves RUNNING for at least a second (unless
+     *  the job completes first).
+     */
+    try {
+      synchronized (this) {
+        wait(TimeUnit.SECONDS.toMillis(1));
+      }
+    } catch (InterruptedException e) {
+      setError(e);
+      return;
+    }
+
+    setState(State.WAITING);
+  }
+
+  @Override
+  public void setQoSEngine(CellStub qosEngine) {
+    this.qosEngine = qosEngine;
+  }
+
+  @Override
+  public void setQoSResponseReceiver(QoSResponseReceiver responseReceiver) {
+    this.responseReceiver = responseReceiver;
+  }
+}
diff --git a/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/plugins/qosengine/UpdateQoSJobProvider.java b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/plugins/qosengine/UpdateQoSJobProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..9c2a86b48f939ffac0f6e6cf5e2da89fce06a485
--- /dev/null
+++ b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/plugins/qosengine/UpdateQoSJobProvider.java
@@ -0,0 +1,101 @@
+/*
+COPYRIGHT STATUS:
+Dec 1st 2001, Fermi National Accelerator Laboratory (FNAL) documents and
+software are sponsored by the U.S. Department of Energy under Contract No.
+DE-AC02-76CH03000. Therefore, the U.S. Government retains a  world-wide
+non-exclusive, royalty-free license to publish or reproduce these documents
+and software for U.S. Government purposes.  All documents and software
+available from this server are protected under the U.S. and Foreign
+Copyright Laws, and FNAL reserves all rights.
+
+Distribution of the software available from this server is free of
+charge subject to the user following the terms of the Fermitools
+Software Legal Information.
+
+Redistribution and/or modification of the software shall be accompanied
+by the Fermitools Software Legal Information  (including the copyright
+notice).
+
+The user is asked to feed back problems, benefits, and/or suggestions
+about the software to the Fermilab Software Providers.
+
+Neither the name of Fermilab, the  URA, nor the names of the contributors
+may be used to endorse or promote products derived from this software
+without specific prior written permission.
+
+DISCLAIMER OF LIABILITY (BSD):
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+"AS IS" AND ANY EXPRESS OR IMPLIED  WARRANTIES, INCLUDING, BUT NOT
+LIMITED TO, THE IMPLIED  WARRANTIES OF MERCHANTABILITY AND FITNESS
+FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL FERMILAB,
+OR THE URA, OR THE U.S. DEPARTMENT of ENERGY, OR CONTRIBUTORS BE LIABLE
+FOR  ANY  DIRECT, INDIRECT,  INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
+OF SUBSTITUTE  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY  OF
+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE  POSSIBILITY OF SUCH DAMAGE.
+
+Liabilities of the Government:
+
+This software is provided by URA, independent from its Prime Contract
+with the U.S. Department of Energy. URA is acting independently from
+the Government and in its own private capacity and is not acting on
+behalf of the U.S. Government, nor as its contractor nor its agent.
+Correspondingly, it is understood and agreed that the U.S. Government
+has no connection to this software and in no manner whatsoever shall
+be liable for nor assume any responsibility or obligation for any claim,
+cost, or damages arising out of or resulting from the use of the software
+available from this server.
+
+Export Control:
+
+All documents and software available from this server are subject to U.S.
+export control laws.  Anyone downloading information from this server is
+obligated to secure any necessary Government licenses before exporting
+documents or software obtained from this server.
+ */
+package org.dcache.services.bulk.plugins.qosengine;
+
+import com.google.common.collect.ImmutableSet;
+import java.util.Set;
+import org.dcache.services.bulk.job.BulkJobArgumentDescriptor;
+import org.dcache.services.bulk.job.BulkJobKey;
+import org.dcache.services.bulk.job.BulkJobProvider;
+import org.dcache.services.bulk.job.TargetExpansionJob.ExpansionType;
+
+import static org.dcache.services.bulk.job.MultipleTargetJob.TargetType.FILE;
+
+/**
+ *  Provides update qos job for single file.
+ */
+public class UpdateQoSJobProvider extends BulkJobProvider<UpdateQoSJob> {
+
+  static final BulkJobArgumentDescriptor TARGET_QOS =
+      new BulkJobArgumentDescriptor("target-qos",
+                                "the desired qos transition ('disk' is limited to "
+                                           + "files with volatile/unknown qos status)",
+                                 "disk|tape|disk+tape",
+                                   true,
+                                null);
+
+  public UpdateQoSJobProvider() {
+    super("UPDATE-QOS", FILE, ExpansionType.DEPTH_FIRST);
+  }
+
+  @Override
+  public UpdateQoSJob createJob(BulkJobKey key, BulkJobKey parentKey) {
+    return new UpdateQoSJob(key, parentKey, activity);
+  }
+
+  @Override
+  public Class<UpdateQoSJob> getJobClass() {
+    return UpdateQoSJob.class;
+  }
+
+  public Set<BulkJobArgumentDescriptor> getArguments() {
+    return ImmutableSet.of(TARGET_QOS);
+  }
+}
diff --git a/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/util/QoSResponseReceiver.java b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/util/QoSResponseReceiver.java
new file mode 100644
index 0000000000000000000000000000000000000000..1a43caa24caa1c174df7e447f88969b2fd9fe471
--- /dev/null
+++ b/modules/dcache-bulk/src/main/java/org/dcache/services/bulk/util/QoSResponseReceiver.java
@@ -0,0 +1,83 @@
+/*
+COPYRIGHT STATUS:
+Dec 1st 2001, Fermi National Accelerator Laboratory (FNAL) documents and
+software are sponsored by the U.S. Department of Energy under Contract No.
+DE-AC02-76CH03000. Therefore, the U.S. Government retains a  world-wide
+non-exclusive, royalty-free license to publish or reproduce these documents
+and software for U.S. Government purposes.  All documents and software
+available from this server are protected under the U.S. and Foreign
+Copyright Laws, and FNAL reserves all rights.
+
+Distribution of the software available from this server is free of
+charge subject to the user following the terms of the Fermitools
+Software Legal Information.
+
+Redistribution and/or modification of the software shall be accompanied
+by the Fermitools Software Legal Information  (including the copyright
+notice).
+
+The user is asked to feed back problems, benefits, and/or suggestions
+about the software to the Fermilab Software Providers.
+
+Neither the name of Fermilab, the  URA, nor the names of the contributors
+may be used to endorse or promote products derived from this software
+without specific prior written permission.
+
+DISCLAIMER OF LIABILITY (BSD):
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+"AS IS" AND ANY EXPRESS OR IMPLIED  WARRANTIES, INCLUDING, BUT NOT
+LIMITED TO, THE IMPLIED  WARRANTIES OF MERCHANTABILITY AND FITNESS
+FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL FERMILAB,
+OR THE URA, OR THE U.S. DEPARTMENT of ENERGY, OR CONTRIBUTORS BE LIABLE
+FOR  ANY  DIRECT, INDIRECT,  INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
+OF SUBSTITUTE  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY  OF
+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE  POSSIBILITY OF SUCH DAMAGE.
+
+Liabilities of the Government:
+
+This software is provided by URA, independent from its Prime Contract
+with the U.S. Department of Energy. URA is acting independently from
+the Government and in its own private capacity and is not acting on
+behalf of the U.S. Government, nor as its contractor nor its agent.
+Correspondingly, it is understood and agreed that the U.S. Government
+has no connection to this software and in no manner whatsoever shall
+be liable for nor assume any responsibility or obligation for any claim,
+cost, or damages arising out of or resulting from the use of the software
+available from this server.
+
+Export Control:
+
+All documents and software available from this server are subject to U.S.
+export control laws.  Anyone downloading information from this server is
+obligated to secure any necessary Government licenses before exporting
+documents or software obtained from this server.
+ */
+package org.dcache.services.bulk.util;
+
+import dmg.cells.nucleus.CellMessageReceiver;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+import org.dcache.services.bulk.QoSEngineAware;
+import org.dcache.vehicles.qos.QoSTransitionCompletedMessage;
+
+public class QoSResponseReceiver implements CellMessageReceiver {
+  private final Map<String, QoSEngineAware> waitingJobs
+      = Collections.synchronizedMap(new HashMap<>());
+
+  public void register(String key, QoSEngineAware job) {
+      waitingJobs.put(key, job);
+  }
+
+  public void messageArrived(QoSTransitionCompletedMessage message) {
+    QoSEngineAware job = waitingJobs.remove(message.getPnfsId().toString());
+    if (job != null) {
+      job.relay(message);
+    }
+  }
+}
diff --git a/modules/dcache-bulk/src/main/resources/META-INF/services/org.dcache.services.bulk.job.BulkJobProvider b/modules/dcache-bulk/src/main/resources/META-INF/services/org.dcache.services.bulk.job.BulkJobProvider
index cc7a1cf5f039ed59239b83b22c57d9e96449150c..cb5c2211162c00a243a096140634e56087bb17f2 100644
--- a/modules/dcache-bulk/src/main/resources/META-INF/services/org.dcache.services.bulk.job.BulkJobProvider
+++ b/modules/dcache-bulk/src/main/resources/META-INF/services/org.dcache.services.bulk.job.BulkJobProvider
@@ -2,5 +2,5 @@ org.dcache.services.bulk.plugins.BFirstWalkJobProvider
 org.dcache.services.bulk.plugins.DFirstWalkJobProvider
 org.dcache.services.bulk.plugins.pinmanager.UnpinJobProvider
 org.dcache.services.bulk.plugins.pinmanager.PinJobProvider
-org.dcache.services.bulk.plugins.qos.UpdateQoSJobProvider
+org.dcache.services.bulk.plugins.qosengine.UpdateQoSJobProvider
 org.dcache.services.bulk.plugins.delete.DeleteFileJobProvider
diff --git a/modules/dcache-bulk/src/main/resources/org/dcache/services/bulk/bulk.xml b/modules/dcache-bulk/src/main/resources/org/dcache/services/bulk/bulk.xml
index 419588f0c366eed43c33c00a757a64ad4a0b713b..98923d07f768ea88c61ba4e37699331819856226 100644
--- a/modules/dcache-bulk/src/main/resources/org/dcache/services/bulk/bulk.xml
+++ b/modules/dcache-bulk/src/main/resources/org/dcache/services/bulk/bulk.xml
@@ -38,6 +38,13 @@
     <property name="timeoutUnit" value="${bulk.service.ping.timeout.unit}"/>
   </bean>
 
+  <bean id="qos-engine-stub" class="org.dcache.cells.CellStub">
+    <description>QoS Engine communication stub</description>
+    <property name="destination" value="${bulk.service.qos}"/>
+    <property name="timeout" value="${bulk.service.qos.timeout}"/>
+    <property name="timeoutUnit" value="${bulk.service.qos.timeout.unit}"/>
+  </bean>
+
   <bean id="pool-monitor" class="org.dcache.poolmanager.RemotePoolMonitor">
     <description>Maintains runtime information about all pools</description>
     <property name="poolManagerStub" ref="pool-manager-stub"/>
@@ -131,13 +138,19 @@
       <description>In-memory Storage for jobs</description>
   </bean>
 
+  <bean id="qos-response-receiver" class="org.dcache.services.bulk.util.QoSResponseReceiver">
+      <description>Relays QoS responses to waiting jobs.</description>
+  </bean>
+
   <bean id="job-factory" class="org.dcache.services.bulk.job.BulkJobFactory">
     <description>Factory for creating various types of bulk jobs; uses SPI to load providers.</description>
     <property name="pnfsManager" ref="pnfs-manager-stub"/>
     <property name="pinManager" ref="pin-manager-stub"/>
     <property name="poolManager" ref="pool-manager-stub"/>
     <property name="poolMonitor" ref="pool-monitor"/>
+    <property name="qosEngine" ref="qos-engine-stub"/>
     <property name="pingService" ref="ping-service"/>
+    <property name="qoSResponseReceiver" ref="qos-response-receiver"/>
   </bean>
 
   <bean id="statistics" class="org.dcache.services.bulk.util.BulkServiceStatistics">
diff --git a/skel/share/defaults/bulk.properties b/skel/share/defaults/bulk.properties
index 3f395f106444023bd60b0c945aa96d6e0bff22e9..06aca1a6be5d1a880d4427cbfd976578c319b3f8 100644
--- a/skel/share/defaults/bulk.properties
+++ b/skel/share/defaults/bulk.properties
@@ -8,7 +8,7 @@
 bulk.cell.name=${dcache.service.bulk}
 
 bulk.cell.consume=${bulk.cell.name}
-bulk.cell.subscribe=${bulk.pool-monitor.topic}
+bulk.cell.subscribe=${bulk.pool-monitor.topic},${bulk.qos-transition.topic}
 
 bulk.ping.cell.name=${dcache.service.bulk.ping}
 bulk.ping.cell.consume=${bulk.ping.cell.name}
@@ -133,6 +133,15 @@ bulk.service.poolmanager=${dcache.service.poolmanager}
 bulk.service.poolmanager.timeout=1
 (one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)bulk.service.poolmanager.timeout.unit=MINUTES
 
+# ---- Endpoint for contacting pool manager.
+#
+bulk.service.qos=${dcache.service.qos-engine}
+
+# ---- How long to wait for a response from the pool manager.
+#
+bulk.service.qos.timeout=1
+(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)bulk.service.qos.timeout.unit=MINUTES
+
 # ---- Endpoint for the 'ping' service (testing only).
 #
 bulk.service.ping=${dcache.service.ping}
@@ -147,3 +156,7 @@ bulk.service.ping.timeout=5
 # Topic on which to expect pool monitor updates
 #
 bulk.pool-monitor.topic=${dcache.pool-monitor.topic}
+
+# Topic on which to expect qos transition completed updates
+#
+bulk.qos-transition.topic=${dcache.qos-transition.topic}
diff --git a/skel/share/services/bulk.batch b/skel/share/services/bulk.batch
index 8e8e9fe533b83da41b6ff9f1bccc0e5115297d20..b295ea58b083898f60456ac3648b337d121f4cf6 100644
--- a/skel/share/services/bulk.batch
+++ b/skel/share/services/bulk.batch
@@ -27,6 +27,9 @@ check -strong bulk.service.pinmanager.timeout.unit
 check -strong bulk.service.poolmanager
 check -strong bulk.service.poolmanager.timeout
 check -strong bulk.service.poolmanager.timeout.unit
+check -strong bulk.service.qos
+check -strong bulk.service.qos.timeout
+check -strong bulk.service.qos.timeout.unit
 check -strong bulk.service.ping
 check -strong bulk.service.ping.timeout
 check -strong bulk.service.ping.timeout.unit
